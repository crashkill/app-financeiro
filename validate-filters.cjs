const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

// Vite exp√µe vari√°veis de ambiente com o prefixo VITE_
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('Erro: As vari√°veis de ambiente VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY n√£o foram encontradas no arquivo .env.local.');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function validateFilters() {
  console.log('üöÄ  Iniciando valida√ß√£o dos filtros...');

  try {
    // 1. Validar Projetos
    console.log('   - Validando projetos...');
    const { data: projectsResponse, error: projectsError } = await supabase.functions.invoke('financial-data-unified', {
      body: { type: 'projetos' }
    });

    if (projectsError) {
      throw new Error(`Erro ao buscar projetos: ${projectsError.message}`);
    }

    if (!projectsResponse.success || !Array.isArray(projectsResponse.data)) {
        throw new Error(`Resposta inv√°lida da Edge Function para projetos: ${JSON.stringify(projectsResponse)}`);
    }
    
    const projectCount = projectsResponse.data.length;
    console.log(`     ‚úÖ  Sucesso! ${projectCount} projetos encontrados.`);
    if (projectCount < 80) { // Esperado ~88
        console.warn(`     ‚ö†Ô∏è  Aten√ß√£o: N√∫mero de projetos (${projectCount}) √© menor que o esperado.`);
    }


    // 2. Validar Anos
    console.log('\n   - Validando anos...');
    const { data: yearsResponse, error: yearsError } = await supabase.functions.invoke('financial-data-unified', {
        body: { type: 'anos' }
    });

    if (yearsError) {
        throw new Error(`Erro ao buscar anos: ${yearsError.message}`);
    }

    if (!yearsResponse.success || !Array.isArray(yearsResponse.data)) {
        throw new Error(`Resposta inv√°lida da Edge Function para anos: ${JSON.stringify(yearsResponse)}`);
    }

    const yearCount = yearsResponse.data.length;
    const minYear = Math.min(...yearsResponse.data);
    console.log(`     ‚úÖ  Sucesso! ${yearCount} anos encontrados.`);
    console.log(`     üóìÔ∏è  Anos: ${yearsResponse.data.join(', ')}`);
    if (minYear > 2016) {
        console.warn(`     ‚ö†Ô∏è  Aten√ß√£o: O ano inicial (${minYear}) √© maior que o esperado (2016).`);
    }


    console.log('\nüèÅ  Valida√ß√£o conclu√≠da com sucesso!');

  } catch (error) {
    console.error('\n‚ùå  Erro na valida√ß√£o:', error.message);
    process.exit(1);
  }
}

validateFilters();