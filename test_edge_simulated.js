import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://oomhhhfahdvavnhlbioa.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9vbWhoaGZhaGR2YXZuaGliaW9hIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjUwMjY3MSwiZXhwIjoyMDcyMDc4NjcxfQ.VCD-Ei4eHS_AO9L2jGL2lb9Rqv3d6O0B9rqN0HRHab8';

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Erro: Vari√°veis de ambiente do Supabase n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

class EdgeFunctionTester {
  constructor() {
    this.executionId = `test_edge_${Date.now()}`;
    console.log(`üß™ TESTE DA EDGE FUNCTION SIMULADA - ${this.executionId}`);
    console.log(`üìÖ Data/Hora: ${new Date().toLocaleString('pt-BR')}`);
    console.log(`üîó Supabase URL: ${supabaseUrl}\n`);
  }

  async log(step, status, message = '') {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] ${step}: ${status} - ${message}`);
  }

  async testEdgeFunction() {
    console.log('üöÄ TESTANDO EDGE FUNCTION: download-hitss-simulated');
    await this.log('EDGE_TEST', 'INICIADO', 'Testando Edge Function simulada de download');

    try {
      console.log('‚ö° Chamando Edge Function simulada...');

      const startTime = Date.now();

      // Chamar a Edge Function simulada
      const { data, error } = await supabase.functions.invoke('download-hitss-simulated');

      const executionTime = (Date.now() - startTime) / 1000;

      if (error) {
        console.log(`‚ùå Erro na Edge Function: ${error.message}`);

        // Verificar se a fun√ß√£o existe
        console.log('\nüîç Verificando fun√ß√µes dispon√≠veis...');
        try {
          const { data: functions, error: listError } = await supabase.functions.list();
          if (listError) {
            console.log(`‚ö†Ô∏è Erro ao listar fun√ß√µes: ${listError.message}`);
          } else {
            console.log('üìã Fun√ß√µes dispon√≠veis:');
            functions?.forEach(func => {
              console.log(`  ‚Ä¢ ${func.name} (${func.status})`);
            });
          }
        } catch (listErr) {
          console.log(`‚ö†Ô∏è Erro ao verificar fun√ß√µes: ${listErr.message}`);
        }

        await this.log('EDGE_TEST', 'ERRO', error.message);
        return false;
      }

      console.log(`‚úÖ Edge Function executada com sucesso em ${executionTime.toFixed(2)}s`);
      console.log(`üìä Resultados:`);
      console.log(`  ‚Ä¢ Status: ${data.success ? '‚úÖ SUCESSO' : '‚ùå FALHA'}`);
      console.log(`  ‚Ä¢ Tempo de Download: ${data.downloadTime?.toFixed(2) || 'N/A'}s`);
      console.log(`  ‚Ä¢ Tempo Total: ${data.totalTime?.toFixed(2) || 'N/A'}s`);
      console.log(`  ‚Ä¢ Arquivo: ${data.fileName || 'N/A'}`);
      console.log(`  ‚Ä¢ Tamanho: ${data.fileSize || 'N/A'} MB`);
      console.log(`  ‚Ä¢ Registros: ${data.recordCount || 'N/A'}`);
      console.log(`  ‚Ä¢ Inseridos: ${data.insertedCount || 'N/A'}`);
      console.log(`  ‚Ä¢ Storage: ${data.storagePath || 'N/A'}`);
      console.log(`  ‚Ä¢ Dados Mock: ${data.mockData ? '‚úÖ Sim' : '‚ùå N√£o'}`);

      await this.log('EDGE_TEST', 'SUCESSO',
        `Download: ${data.downloadTime?.toFixed(2)}s, Total: ${data.totalTime?.toFixed(2)}s, Arquivo: ${data.fileName}, Inseridos: ${data.insertedCount}`);

      // Verificar se os dados foram realmente inseridos na tabela
      console.log('\nüîç VERIFICANDO DADOS NA TABELA DRE_HITSS...');

      const { data: insertedData, error: queryError } = await supabase
        .from('dre_hitss')
        .select('*')
        .eq('metadata->>source', 'edge_function_simulation')
        .order('created_at', { ascending: false })
        .limit(5);

      if (queryError) {
        console.log(`‚ö†Ô∏è Erro ao verificar tabela: ${queryError.message}`);
      } else {
        console.log(`‚úÖ Registros encontrados: ${insertedData?.length || 0}`);
        if (insertedData && insertedData.length > 0) {
          console.log('üìã Exemplo dos registros inseridos:');
          insertedData.forEach((record, index) => {
            console.log(`  ${index + 1}. Projeto: ${record.projeto}`);
            console.log(`     Valor: R$ ${record.valor}`);
            console.log(`     Natureza: ${record.natureza}`);
            console.log(`     Fonte: ${record.metadata?.source}`);
            console.log('');
          });
        }
      }

      // Verificar se o arquivo foi enviado para o Storage
      console.log('\nüîç VERIFICANDO ARQUIVO NO STORAGE...');

      if (data.storagePath) {
        const { data: files, error: listError } = await supabase.storage
          .from('dre-files')
          .list('uploads', {
            search: data.fileName
          });

        if (listError) {
          console.log(`‚ö†Ô∏è Erro ao verificar Storage: ${listError.message}`);
        } else {
          const foundFile = files?.find(file => file.name === data.fileName);
          if (foundFile) {
            console.log(`‚úÖ Arquivo encontrado no Storage:`);
            console.log(`  ‚Ä¢ Nome: ${foundFile.name}`);
            console.log(`  ‚Ä¢ Tamanho: ${(foundFile.metadata?.size / (1024 * 1024)).toFixed(2)} MB`);
            console.log(`  ‚Ä¢ Atualizado: ${new Date(foundFile.updated_at).toLocaleString('pt-BR')}`);
            console.log(`  ‚Ä¢ URL: ${supabaseUrl}/storage/v1/object/public/dre-files/${data.storagePath}`);
          } else {
            console.log(`‚ùå Arquivo n√£o encontrado no Storage`);
          }
        }
      }

      console.log('\nüìã AN√ÅLISE DE VIABILIDADE PARA EDGE FUNCTIONS:');
      console.log('-'.repeat(50));

      const downloadTime = data.downloadTime || 0;
      const totalTime = data.totalTime || 0;

      console.log(`üì• Download: ${downloadTime.toFixed(2)}s - ${downloadTime > 300 ? '‚ùå Muito lento para Edge Function' : '‚úÖ Aceit√°vel'}`);
      console.log(`‚ö° Processamento: ${totalTime.toFixed(2)}s - ${totalTime > 60 ? '‚ö†Ô∏è Pode ter timeout' : '‚úÖ OK'}`);
      console.log(`üèÜ Total: ${totalTime.toFixed(2)}s - ${totalTime > 300 ? '‚ùå N√£o vi√°vel' : totalTime > 180 ? '‚ö†Ô∏è Vi√°vel com otimiza√ß√µes' : '‚úÖ Perfeito'}`);

      if (totalTime <= 180) {
        console.log('‚úÖ Sistema vi√°vel para Edge Functions!');
      } else {
        console.log('‚ùå Sistema muito lento - considerar otimiza√ß√µes');
      }

      return true;

    } catch (error) {
      console.log(`‚ùå Erro no teste da Edge Function: ${error.message}`);

      // Verificar se a fun√ß√£o existe
      console.log('\nüîç Verificando fun√ß√µes dispon√≠veis...');
      try {
        const { data: functions, error: listError } = await supabase.functions.list();
        if (listError) {
          console.log(`‚ö†Ô∏è Erro ao listar fun√ß√µes: ${listError.message}`);
        } else {
          console.log('üìã Fun√ß√µes dispon√≠veis:');
          functions?.forEach(func => {
            console.log(`  ‚Ä¢ ${func.name} (${func.status})`);
          });
        }
      } catch (listErr) {
        console.log(`‚ö†Ô∏è Erro ao verificar fun√ß√µes: ${listErr.message}`);
      }

      await this.log('EDGE_TEST', 'ERRO', error.message);
      return false;
    }
  }

  async execute() {
    console.log('üß™ EXECUTANDO TESTE DA EDGE FUNCTION SIMULADA\n');

    const success = await this.testEdgeFunction();

    console.log('\n' + '='.repeat(60));
    console.log(`üìä RESULTADO DO TESTE: ${success ? '‚úÖ SUCESSO' : '‚ùå FALHA'}`);
    console.log(`üÜî ID da Execu√ß√£o: ${this.executionId}`);
    console.log(`‚è±Ô∏è Dura√ß√£o: ${((Date.now() - new Date(this.executionId.split('_')[2]).getTime()) / 1000).toFixed(2)}s`);
    console.log('='.repeat(60));

    return success;
  }
}

async function main() {
  try {
    const tester = new EdgeFunctionTester();
    const result = await tester.execute();

    console.log(`\n${result ? 'üéâ' : 'üí•'} Teste da Edge Function simulada ${result ? 'conclu√≠do com sucesso' : 'falhou'}`);
    process.exit(result ? 0 : 1);

  } catch (error) {
    console.error('üí• Erro cr√≠tico no teste:', error);
    process.exit(1);
  }
}

if (import.meta.url === `file://${process.argv[1].replace(/\\/g, '/')}`) {
  main();
}

main();

export default EdgeFunctionTester;
