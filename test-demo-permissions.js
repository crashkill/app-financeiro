/**
 * Teste de Valida√ß√£o das Permiss√µes do Usu√°rio Demo
 * Este script testa se o usu√°rio demo tem acesso correto √†s funcionalidades
 */

const puppeteer = require('puppeteer');

async function testDemoUserPermissions() {
  console.log('üöÄ Iniciando teste de permiss√µes do usu√°rio demo...');
  
  const browser = await puppeteer.launch({ 
    headless: false, 
    defaultViewport: null,
    args: ['--start-maximized']
  });
  
  const page = await browser.newPage();
  
  try {
    // 1. Navegar para a p√°gina de login
    console.log('üìç Navegando para http://localhost:3001/login');
    await page.goto('http://localhost:3001/login', { waitUntil: 'networkidle2' });
    
    // 2. Fazer login com credenciais demo
    console.log('üîê Fazendo login com credenciais demo...');
    await page.type('input[type="email"]', 'demo@hitss.com');
    await page.type('input[type="password"]', 'demo123');
    await page.click('button[type="submit"]');
    
    // Aguardar redirecionamento
    await page.waitForNavigation({ waitUntil: 'networkidle2' });
    
    // 3. Verificar se chegou ao dashboard
    console.log('üìä Verificando acesso ao dashboard...');
    const currentUrl = page.url();
    if (currentUrl.includes('/dashboard')) {
      console.log('‚úÖ Login realizado com sucesso - Dashboard acess√≠vel');
    } else {
      console.log('‚ùå Erro: N√£o foi redirecionado para o dashboard');
      return;
    }
    
    // 4. Testar acesso √†s funcionalidades permitidas
    const allowedPages = [
      { name: 'Dashboard', url: '/dashboard', selector: 'h1, h2, .dashboard' },
      { name: 'Relat√≥rios', url: '/relatorios', selector: 'h1, h2, .relatorios' },
      { name: 'Upload', url: '/upload', selector: 'h1, h2, .upload' },
      { name: 'Planilhas Financeiras', url: '/planilhas-financeiras', selector: 'h1, h2, .planilhas' }
    ];
    
    console.log('\nüîç Testando acesso √†s p√°ginas permitidas...');
    for (const pageTest of allowedPages) {
      try {
        await page.goto(`http://localhost:3001${pageTest.url}`, { waitUntil: 'networkidle2' });
        await page.waitForSelector(pageTest.selector, { timeout: 5000 });
        console.log(`‚úÖ ${pageTest.name}: Acesso permitido`);
      } catch (error) {
        console.log(`‚ö†Ô∏è ${pageTest.name}: Poss√≠vel problema de acesso ou carregamento`);
      }
    }
    
    // 5. Testar restri√ß√µes de acesso (p√°ginas administrativas)
    const restrictedPages = [
      { name: 'Configura√ß√µes', url: '/configuracoes' },
      { name: 'Admin Check', url: '/admin-check' },
      { name: 'Settings', url: '/settings' }
    ];
    
    console.log('\nüö´ Testando restri√ß√µes de acesso...');
    for (const pageTest of restrictedPages) {
      try {
        await page.goto(`http://localhost:3001${pageTest.url}`, { waitUntil: 'networkidle2' });
        const currentUrl = page.url();
        
        if (currentUrl.includes('/dashboard') || currentUrl.includes('/login')) {
          console.log(`‚úÖ ${pageTest.name}: Acesso corretamente restrito (redirecionado)`);
        } else if (currentUrl.includes(pageTest.url)) {
          console.log(`‚ùå ${pageTest.name}: ERRO - Acesso n√£o deveria ser permitido!`);
        }
      } catch (error) {
        console.log(`‚úÖ ${pageTest.name}: Acesso corretamente restrito (erro de navega√ß√£o)`);
      }
    }
    
    // 6. Verificar elementos da interface
    console.log('\nüé® Verificando elementos da interface...');
    await page.goto('http://localhost:3001/dashboard', { waitUntil: 'networkidle2' });
    
    // Verificar se n√£o h√° bot√µes administrativos vis√≠veis
    const adminButtons = await page.$$eval('button, a', elements => 
      elements.filter(el => 
        el.textContent.toLowerCase().includes('admin') ||
        el.textContent.toLowerCase().includes('configurar') ||
        el.textContent.toLowerCase().includes('gerenciar')
      ).length
    );
    
    if (adminButtons === 0) {
      console.log('‚úÖ Interface: Nenhum bot√£o administrativo vis√≠vel');
    } else {
      console.log(`‚ö†Ô∏è Interface: ${adminButtons} bot√µes administrativos encontrados`);
    }
    
    // 7. Testar logout
    console.log('\nüö™ Testando logout...');
    try {
      await page.click('button:has-text("Sair"), a:has-text("Logout"), [data-testid="logout"]');
      await page.waitForNavigation({ waitUntil: 'networkidle2' });
      
      if (page.url().includes('/login')) {
        console.log('‚úÖ Logout realizado com sucesso');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Logout: Bot√£o n√£o encontrado ou erro no processo');
    }
    
    console.log('\nüéâ Teste de permiss√µes do usu√°rio demo conclu√≠do!');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
  } finally {
    await browser.close();
  }
}

// Executar o teste
if (require.main === module) {
  testDemoUserPermissions().catch(console.error);
}

module.exports = { testDemoUserPermissions };