const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://oomhhhfahdvavnhlbioa.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9vbWhoaGZhaGR2YXZuaGxiaW9hIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY1MDI2NzEsImV4cCI6MjA3MjA3ODY3MX0.VCD-Ei4eHS_AO9L2jGL2lb9Rqv3d6O0B9rqN0HRHab8';

const supabase = createClient(supabaseUrl, supabaseKey);

// Fun√ß√£o para executar a automa√ß√£o HITSS
async function executeAutomation() {
  console.log('üöÄ Executando automa√ß√£o HITSS...');
  
  try {
    // Chamar a Edge Function
    const { data, error } = await supabase.functions.invoke('hitss-automation', {
      body: {
        trigger: 'manual',
        executionId: crypto.randomUUID()
      }
    });
    
    if (error) {
      console.error('‚ùå Erro na execu√ß√£o:', error);
      return false;
    }
    
    console.log('‚úÖ Automa√ß√£o executada com sucesso!');
    console.log('üìä Resultado:', data);
    return true;
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
    return false;
  }
}

// Fun√ß√£o para mostrar dados em formato de tabela
async function showDataTable() {
  console.log('\nüìã DADOS REAIS DA AUTOMA√á√ÉO HITSS');
  console.log('=' .repeat(80));
  
  try {
    // Buscar dados dos projetos
    const { data: projects, error } = await supabase
      .from('hitss_projetos')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (error) {
      console.error('‚ùå Erro ao buscar dados:', error);
      return;
    }
    
    if (!projects || projects.length === 0) {
      console.log('‚ö†Ô∏è  Nenhum dado encontrado na tabela hitss_projetos');
      return;
    }
    
    console.log(`\nüìä Total de projetos: ${projects.length}`);
    console.log('\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
    console.log('‚îÇ #   ‚îÇ Nome do Projeto         ‚îÇ Cliente         ‚îÇ Respons√°vel ‚îÇ Status       ‚îÇ Data Cria√ß√£o        ‚îÇ');
    console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
    
    projects.forEach((project, index) => {
      const nome = (project.nome || 'N/A').padEnd(23).substring(0, 23);
      const cliente = (project.cliente || 'N/A').padEnd(15).substring(0, 15);
      const responsavel = (project.responsavel || 'N/A').padEnd(11).substring(0, 11);
      const status = (project.status || 'N/A').padEnd(12).substring(0, 12);
      const dataFormatada = project.created_at 
        ? new Date(project.created_at).toLocaleString('pt-BR').padEnd(19).substring(0, 19)
        : 'N/A'.padEnd(19);
      
      console.log(`‚îÇ ${(index + 1).toString().padStart(3)} ‚îÇ ${nome} ‚îÇ ${cliente} ‚îÇ ${responsavel} ‚îÇ ${status} ‚îÇ ${dataFormatada} ‚îÇ`);
    });
    
    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
    
    // Estat√≠sticas
    const statusCount = projects.reduce((acc, project) => {
      const status = project.status || 'N/A';
      acc[status] = (acc[status] || 0) + 1;
      return acc;
    }, {});
    
    console.log('\nüìà Estat√≠sticas por Status:');
    Object.entries(statusCount).forEach(([status, count]) => {
      console.log(`   ${status}: ${count}`);
    });
    
    // Buscar logs recentes
    const { data: logs } = await supabase
      .from('hitss_automation_logs')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (logs && logs.length > 0) {
      console.log('\nüìù √öltimos 5 logs da automa√ß√£o:');
      console.log('‚îÄ'.repeat(60));
      
      logs.forEach((log, index) => {
        const icon = log.level === 'error' ? '‚ùå' : log.level === 'warning' ? '‚ö†Ô∏è' : '‚úÖ';
        const date = new Date(log.created_at).toLocaleString('pt-BR');
        console.log(`${index + 1}. ${icon} [${log.level.toUpperCase()}] ${date}`);
        console.log(`   ${log.message}`);
        if (index < logs.length - 1) console.log('');
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao exibir dados:', error.message);
  }
}

// Fun√ß√£o principal
async function main() {
  console.log('üéØ EXECU√á√ÉO DA AUTOMA√á√ÉO HITSS COM DADOS REAIS');
  console.log('=' .repeat(80));
  
  // Executar automa√ß√£o
  const success = await executeAutomation();
  
  if (success) {
    // Aguardar um pouco para os dados serem processados
    console.log('\n‚è≥ Aguardando processamento dos dados...');
    await new Promise(resolve => setTimeout(resolve, 3000));
  }
  
  // Mostrar dados independentemente do resultado da execu√ß√£o
  await showDataTable();
  
  console.log('\n‚úÖ Execu√ß√£o conclu√≠da!');
  console.log('\nüí° Nota: Os dados mostrados s√£o REAIS extra√≠dos da automa√ß√£o HITSS.');
  console.log('   Estes n√£o s√£o dados mockados ou simulados.');
}

// Executar
main().catch(console.error);